<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--<mapper namespace="teamSpring.firstProject.dao.UserDao">-->
<mapper namespace="teamSpring.firstProject.dao.UserDao">
    <select id="users" resultType="Map">
        select * from employee
    </select>

<!--    <insert id="addUser" parameterType="User">-->
<!--        INSERT INTO user_info (id, pwd, name)-->
<!--        VALUES (#{id},#{pwd},#{name})-->
<!--    </insert>-->

    <!-- ログインする時検証のため -->

    <select id="selectUser" parameterType="int" resultMap="userResultMap">
        SELECT e_id, password, e_name FROM employee
        WHERE e_id = #{employeeId}
    </select>

    <resultMap id="userResultMap" type="User">
        <result column="e_id" property="id"/>
        <result column="password" property="pwd"/>
        <result column="e_name" property="name"/>
    </resultMap>

    <!-- メイン画面の　〜さん、ようこそのところに名前を表示させるため -->
    <select id="sessionGetEmpName" parameterType="int" resultType="String">
        SELECT e_name FROM employee
        WHERE e_id = #{sessionid}
    </select>

<!--    SELECT d.d_name, e.e_name, s.safety     -->
<!--    FROM employee AS e  -->
<!--    JOIN department AS d ON ( e.d_id = d.d_id )     -->
<!--    JOIN safety_report AS s ON( s.e_id = e.e_id)    -->
<!--    WHERE 1 = 1      -->
<!--    AND d.d_name LIKE CONCAT('%','', '%')       -->
<!--    AND e.e_id LIKE CONCAT('%', 999, '%');      -->

    <!--    MybatisではparameterTypeがMapの場合省略可能   -->

    <!-- 安否表で検索フィルター -->

    <select id="getSafetyTable" resultMap="safetyResult">
        SELECT d.d_name, e.e_name, s.safety, s.date_of_report, e.e_id
        FROM employee AS e
        JOIN department AS d ON ( e.d_id = d.d_id )
        JOIN safety_report AS s ON( s.e_id = e.e_id )
        <where>  <!-- WHERE 1 = 1 -->
            <if test="searchType == '' or searchType == null" >
                AND (d.d_name LIKE CONCAT('%', #{keyword}, '%')
                OR e.e_name LIKE CONCAT('%', #{keyword}, '%'))
            </if>
            <if test="searchType == 'deptName'">
                AND d.d_name LIKE CONCAT('%', #{keyword}, '%')
            </if>
            <if test="searchType == 'empName'">
                AND e.e_name LIKE CONCAT('%', #{keyword}, '%')
            </if>
            AND s.date_of_report = (
                SELECT MAX(date_of_report)
                FROM safety_report
                WHERE e_id = s.e_id
            )
            ORDER BY date_of_report DESC
        </where>
    </select>

    <resultMap id="safetyResult" type="Safety">  <!-- type="Safety"はdomainパッケージにSafetyクラスを見てみ -->
        <result column="d_name" property="authority"/>
        <result column="e_name" property="employeeName"/>
        <result column="safety" property="safety"/>
        <result column="date_of_report" property="reportDate"/>
        <result column="e_id" property="employeeId"/>
    </resultMap>

    <!-- 全部署のid(数字)のリストを持ってくる -->

    <select id="departmentIdList" resultType="int">
        SELECT d_id FROM department
    </select>

    <!-- 全部署の名前のリストを持ってくる -->

    <select id="departmentNameList" resultType="String">
        SELECT d_name FROM department
    </select>

    <!-- メイン画面の〜さんが登録しましたのテーブルを表示 -->

    <select id="reportTable" resultMap="reportTableMap">
        SELECT d.d_name, e.e_name, s.safety, s.date_of_report
        FROM safety_report AS s
        JOIN employee AS e ON (s.e_id = e.e_id)
        JOIN department AS d ON (d.d_id = e.d_id)
        ORDER BY s.date_of_report DESC
        LIMIT 5
    </select>

    <resultMap id="reportTableMap" type="java.util.Map">
        <result column="e_name" property="name"/>
        <result column="safety" property="safety"/>
        <result column="date_of_report" property="reportDate"/>
        <result column="d_name" property="dpName"/>
    </resultMap>



<!--
    各部署ごとの部署名と安否登録をした人の人数を返す。

    parameterTypeをjava.util.ListでdepartmentIdList(部署テーブルのd_idリスト)を持ってくる
    <foreach>の中で使うのはパラメーターとして持ってきたd_idリストを使う
    collection: listは parameterTypeで持ってきたデータ型がListなのを定義する
    index="index"は配列の０から始まる、index="count"は１から始まる
    item="item"はparameterで持ってきたリストをAliasとして使う（ニックネーム）

    COALESCE関数は複数のパラメターを受けて、NULLじゃない最初のパラメターを返す、もし、全パラメターがNULLの場合はNULLを返す。
    COALESCE(NULL, 1, 2) を実行すると 1を返し、
    COALESCE(NULL, NULL, 3)を実行すると３を返す。

-->
    <select id="safetyCheckOK" parameterType="java.util.List" resultMap="selectDepartmentCount">

        SELECT d.d_name, COALESCE(COUNT(s.e_id), 0) AS count
        FROM department AS d
        LEFT JOIN employee AS e ON (
            e.d_id = d.d_id AND e.d_id IN
            <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
                #{item}
            </foreach>
        )
        LEFT JOIN (
            SELECT s1.e_id
            FROM safety_report AS s1
            WHERE s1.date_of_report = (
                SELECT MAX(s2.date_of_report)
                FROM safety_report AS s2
                WHERE s2.e_id = s1.e_id
                ) AND s1.safety != '-'
        ) AS s ON (s.e_id = e.e_id)
        GROUP BY d.d_name
        ORDER BY d.d_name DESC;

    </select>

    <resultMap id="selectDepartmentCount" type="java.util.HashMap">
        <result column="d_name" property="departmentName"/>
        <result column="count" property="count"/>
    </resultMap>

<!--
    SELECT d.d_name, COUNT(*) AS count
    FROM safety_report AS s
    JOIN employee AS e ON ( s.e_id = e.e_id )
    JOIN department AS d ON ( e.d_id = d.d_id )
    WHERE s.safety != '-'
    AND e.d_id IN (1,2,3,4,5)
    AND s.date_of_report = (
    SELECT MAX(date_of_report)
    FROM safety_report
    WHERE e_id = s.e_id
    )
    GROUP BY d.d_name
    ORDER BY d.d_name DESC

    +ㅡㅡㅡㅡㅡㅡㅡㅡ+ㅡㅡㅡㅡㅡ+
    | d_name    | count |
    +ㅡㅡㅡㅡㅡㅡㅡㅡ+ㅡㅡㅡㅡㅡ+
    | 総務部      |    23 |
    | 広報部      |     1 |
    | 人事部      |     1 |
    +ㅡㅡㅡㅡㅡㅡㅡㅡ+ㅡㅡㅡㅡㅡ+

-->


    <!--　各部署ごとの総社員数を持ってくる　-->

    <select id="departmentAllEmployees" parameterType="java.util.List" resultMap="dpAllEmployees">
        SELECT COUNT(*) AS count
        FROM employee AS e
        JOIN department AS d ON(e.d_id = d.d_id)
        WHERE d.d_id IN
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY d.d_name
        ORDER BY d.d_name DESC
    </select>

    <resultMap id="dpAllEmployees" type="java.util.Map">
        <result column="count" property="empCount"/>
    </resultMap>

<!--
    mysql> SELECT COUNT(*) AS count
           FROM employee AS e
           JOIN department AS d ON(e.d_id = d.d_id)
           WHERE d.d_id IN (1,2,3,4,5)
           GROUP BY d.d_name
           ORDER BY d.d_name DESC;

    +ㅡㅡㅡㅡㅡ+
    | count |
    +ㅡㅡㅡㅡㅡ+
    |    37 |
    |     3 |
    |     1 |
    |     2 |
    |     2 |
    +ㅡㅡㅡㅡㅡ+
-->

    <!-- userRegisterForm.htmlのforデータを登録する -->
    
    <insert id="safetyRegistration" parameterType="SafetyFormData">
        INSERT INTO safety_report (e_id, safety, injury_flag, work_flag, other_information)
        VALUES (#{employeeId},#{saOrDa},#{injured},#{working},#{otherInfo});
    </insert>

    <!-- 管理者が新しいユーザーを登録する -->
    <insert id="userRegister" parameterType="User">
        INSERT INTO employee (e_id, e_name, password, Cellphone, d_id)
        values (#{id},#{name},#{pwd},#{cellphone},#{departmentId});
    </insert>
    
<!--    <select id="userSafetyDetail" parameterType="int" resultType="Map">-->
<!--        SELECT * FROM safety_report-->
<!--        WHERE e_id = #{empId}-->
<!--        ORDER BY date_of_report DESC-->
<!--        LIMIT 1;-->
<!--    </select>-->

    <!-- 安否表で該当するユーザーの詳細情報 -->
    <select id="userSafetyDetail" parameterType="int" resultType="Map">
        SELECT s.e_id, e.e_name, s.injury_flag, s.safety, s.work_flag, s.other_information,
               s.date_of_report,d.d_name
        FROM safety_report AS s
        JOIN employee AS e on s.e_id = e.e_id
        JOIN department AS d on d.d_id = e.d_id
        WHERE e.e_id = #{empId}
        ORDER BY date_of_report DESC
        LIMIT 1;
    </select>



<!--  部署番号が1で安否登録をしてない人を数えるsql

      SELECT COUNT(*)
      FROM safety_report AS s
      JOIN employee AS e ON ( s.e_id = e.e_id )
      JOIN department AS d ON ( e.d_id = d.d_id )
      WHERE s.safety = '-' AND e.d_id = 1

-->


</mapper>

<!--<property name="configLocation"  value="classpath:mybatis-config.xml"/> &lt;!&ndash; mybatis 설정파일 위치 &ndash;&gt;-->
<!--<property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/> &lt;!&ndash; SQL 담긴 파일 &ndash;&gt;-->
        <!--    <select id="searchUser" parameterType="int" resultType="User">-->
        <!--        SELECT * FROM user_info-->
        <!--        WHERE id = #{userId}-->
        <!--    </select>-->